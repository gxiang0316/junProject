<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--导入属性配置-->
    <!--<properties resource="db.properties"/>-->
    <!--指定特定数据库的jdbc驱动jar包的位置-->
    <!--<classPathEntry location="${jdbc.driverLocation}"/>-->

    <context id="default" targetRuntime="MyBatis3">
        <!-- 为sql关键字添加分隔符 -->
        <property name="autoDelimitKeywords" value="true"/>

        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>

        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>
        <!--jdbc的数据库连接 -->
        <jdbcConnection connectionURL="jdbc:mysql://localhost:3306/springboot-web?characterEncoding=utf8"
                        driverClass="com.mysql.jdbc.Driver"
                        userId="root" password="123">
        </jdbcConnection>
        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
        targetPackage 指定生成的model生成所在的包名 targetProject 指定在该项目下所在的路径 -->
        <javaModelGenerator targetPackage="com.gordon.springboot.entity" targetProject="src/main/java">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变 即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>
        <!--Mapper.xml映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>
        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码 type="ANNOTATEDMAPPER",
        生成Java Model 和基于注解的Mapper对象 type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
         type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口 -->
        <javaClientGenerator targetPackage="com.gordon.springboot.mapper"
                             targetProject="src/main/java" type="XMLMAPPER">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>
        
        <!-- 需要生成的表名以及实体类命名 -->
        <table tableName="gw_menu" domainObjectName="GwMenu" schema="springboot-web"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <!--这个值原来默认是FALSE的，表示针对字段的下划线转换为驼峰写法，
                而为TRUE，表示原样输出数据库字段中的值(那么表字段可以写成这样userName)-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        </table>
        <!-- 需要生成的表名以及实体类命名 -->
        <table tableName="gw_role" domainObjectName="GwRole" schema="springboot-web"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <!--这个值原来默认是FALSE的，表示针对字段的下划线转换为驼峰写法，
                而为TRUE，表示原样输出数据库字段中的值(那么表字段可以写成这样userName)-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        </table>
        <!-- 需要生成的表名以及实体类命名 -->
        <table tableName="gw_element_permission" domainObjectName="GwPermission" schema="springboot-web"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <!--这个值原来默认是FALSE的，表示针对字段的下划线转换为驼峰写法，
                而为TRUE，表示原样输出数据库字段中的值(那么表字段可以写成这样userName)-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        </table>
    </context>
</generatorConfiguration>
