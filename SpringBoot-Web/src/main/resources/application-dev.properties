# 开发环境配置

# 注意 ： 所有这些配置都不是必须的，都可以在javaConfig中用代码来配置，
# 配置这个后部分组件可以不用javaConfig配置，组件会自动找到这里的配置进行初始化。

# 开源项目：http://www.itdaan.com/blog/2018/01/19/2b15d90926d1a5abf4d48aa454e3b38b.html

# 解决静态文件中文乱码
spring.http.encoding.force=true

###################### springboot 内置tomcat 配置 begin ##########################
###### 生产环境肯定不会用内置tomcat，参数不好调整，也不好监控。连这开发环境我都搞成本地tomcat了，方便找东西
###### 生产环境专业运维，调优方面肯定比你强，此处仅做学习
# Servlet容器配置：
# 程序端口 默认为8080
server.port=8080
# 用户会话过期时间，以秒为单位,默认为30秒
server.servlet.session.timeout=300m
# 配置访问路径，默认为/
server.servlet.context-path=/

# tomcat 配置：
# tomcat 编码，默认为 UTF-8
server.tomcat.uri-encoding=UTF-8
# 配置最大线程数 ，默认为200
server.tomcat.max-threads=1000
# 配置最大连接数，默认为10000
server.tomcat.max-connections=10000
#当tomcat起动的线程数达到最大时，接受排队的请求个数，默认值为100
server.tomcat.accept-count=1000
#线程最小空闲数，默认10
server.tomcat.min-spare-threads=10
#线程最大空闲数，默认10
server.tomcat.max-spare-threads=50
#10秒超时
server.tomcat.connctionTimeout=10000
#文件请求大小
server.MaxFileSize=300MB
server.MaxRequestSize=500MB
#tomcat 连接协议 HTTP/1.1
server.protocol=org.apache.coyote.http11.Http11Nio2Protocol

###################### tomcat 配置 end ##########################

########################  日志配置 这种方式只能做简单配置 最好使用xml方式 begin ########################
# 指定日志配置文件(生产环境用这种方式)
# logging.config=classpath:logback-spring.xml
# Spring Boot推荐使用logback-spring.xml来替代logback.xml来配置logback日志
# 因为logback.xml加载早于application.properties，所以如果你在logback.xml使用了变量时，
# 而恰好这个变量是写在application.properties时，那么就会获取不到，只要改成logback-spring.xml就可以解决
# root日志以warn级别输出
logging.level.root=warn
# controller层日志 info 级别输出
logging.level.com.gordon.springboot.controller=info
# service层日志 info 级别输出
logging.level.com.gordon.springboot.service=info
# dao层日志 debug 级别输出
logging.level.com.gordon.springboot.mapper=debug
# 其他包日志 info 级别输出
logging.level.com.gordon.springboot=info
# spring 相关日志 debug 输出
logging.level.logging.level.org.springframework=DEBUG
# hibernate 相关日志 debug 输出
logging.level.org.hibernate=debug
# 日志记录到文件
#logging.file=logs/spring-boot-web.log
# 日志文件目录
#logging.path=C://SpringBootLogs
# 控制台输出格式
logging.pattern.console=%d{yyyy/MM/dd-HH:mm:ss} %logger- %msg%n
#logging.pattern.console=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n
#logging.pattern.file=%d{yyyy/MM/dd-HH:mm} [%thread] %-5level %logger- %msg%n
# jpa程序打印运行时sql语句到控制台
#spring.jpa.show-sql=true

########################  日志配置 end #####################################################

##################### Druid 数据源配置 begin ########################################
## url路径问题：https://www.cnblogs.com/mracale/p/5842572.html
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot-web?useUnicode=true&characterEncoding=utf8&autoReconnect=true
spring.datasource.data-username=root
spring.datasource.data-password=123456
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.druid.db-type=mysql
#检测数据库链接是否有效，必须配置
spring.datasource.validationQuery=select 'x'
#初始连接数
spring.datasource.initialSize=3
#最大连接池数量
spring.datasource.maxActive=10
#去掉，配置文件对应去掉
#jdbc.maxIdle=20 高版本中已经弃用，配置了也没效果
#配置0,当线程池数量不足，自动补充。
spring.datasource.minIdle=0
#获取链接超时时间为1分钟，单位为毫秒。
spring.datasource.maxWait=60000
#获取链接的时候，不校验是否可用，开启会有损性能。
spring.datasource.testOnBorrow=false
#归还链接到连接池的时候校验链接是否可用。
spring.datasource.testOnReturn=false
#此项配置为true即可，不影响性能，并且保证安全性。意义为：申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.testWhileIdle=true
#1.Destroy线程会检测连接的间隔时间
#2.testWhileIdle的判断依据
spring.datasource.timeBetweenEvictionRunsMillis=60000
#一个链接生存的时间（之前的值：25200000，这个时间有点BT，这个结果不知道是怎么来的，换算后的结果是：25200000/1000/60/60 = 7个小时）
spring.datasource.minEvictableIdleTimeMillis=300000
#链接使用超过时间限制是否回收
spring.datasource.removeAbandoned=true
#超过时间限制时间（单位秒），目前为5分钟，如果有业务处理时间超过5分钟，可以适当调整。
spring.datasource.removeAbandonedTimeout=300
#链接回收的时候控制台打印信息，测试环境可以加上true，线上环境false。会影响性能。
spring.datasource.logAbandoned=false
# 打开PSCache，并且指定每个连接上PSCache的大小。
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.poolPreparedStatements=false
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
# 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
#spring.datasource.maxPoolPreparedStatementPerConnectionSize=100
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
# 监控统计用的filter:stat，日志用的filter:log4j(默认是log4j，下面改成slf4j)，防御sql注入的filter:wall
spring.datasource.filters=stat,wall,slf4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true
# druid 控制台登录用户名，密码
spring.datasource.druid.username=admin
spring.datasource.druid.password=admin
##################### Druid 数据源配置 end ########################################

########################## Mybatis 配置 begin ########################################
# mybatis 全局配置文件
mybatis.config-location=classpath:mybatisConfig.xml
# 配置表对应实体类包路径
mybatis.type-aliases-package=com.gordon.springboot.entity.*
# 配置mapper的xml文件位置
mybatis.mapper-locations=classpath:mapper/*Mapper.xml
#使全局的映射器启用或禁用缓存。
mybatis.configuration.cache-enabled=true
#全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。
mybatis.configuration.lazy-loading-enabled=true
#当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。
mybatis.configuration.aggressive-lazy-loading=true
# 是否允许单条sql 返回多个数据集  (取决于驱动的兼容性) default:true
mybatis.configuration.multiple-result-sets-enabled=true
# 是否可以使用列的别名 (取决于驱动的兼容性) default:true
mybatis.configuration.use-column-label=true
# 允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。  default:false
# <!-- 若不需要自动返回主键，将useGeneratedKeys="true" keyProperty="id"去掉即可(当然如果不需要自动返回主键，直接用注解即可) -->
# *Mapper.xml中：<insert id="insertUserWithBackId" parameterType="User" useGeneratedKeys="true" keyProperty="id" >
mybatis.configuration.use-generated-keys=true
# 指定 MyBatis 如何自动映射 数据基表的列 NONE：不隐射 PARTIAL:部分  FULL:全部
mybatis.configuration.auto-mapping-behavior=partial
# 这是默认的执行类型  （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新）
mybatis.configuration.default-executor-type=simple
# 使用驼峰命名法转换字段。
mybatis.configuration.map-underscore-to-camel-case=true
# 设置本地缓存范围 session:就会有数据的共享  statement:语句范围 (这样就不会有数据的共享 ) defalut:session
mybatis.configuration.local-cache-scope=session
# 设置当JDBC类型为空时,某些驱动程序 要指定值,default:OTHER，插入空值时不需要指定类型
mybatis.configuration.jdbc-type-for-null=null
# 配置sql超时时间，秒
mybatis.configuration.default-statement-timeout=30
# 如果数据为空的字段，则该字段省略不显示，可以通过添加配置文件，规定查询数据为空是则返回null。
mybatis.configuration.call-setters-on-nulls=true

#### mybatis pagehelper 分页配置 ###
# https://www.cnblogs.com/Oliver-rebirth/p/springboot_pagehelper.html
# 定义数据库类型
pagehelper.helper-dialect=mysql
pagehelper.reasonable=true
pagehelper.support-methods-arguments=true
pagehelper.params=countSql

########################## Mybatis 配置 end ########################################

######################### Beetl配置 begin ###############################################
# 前缀，模板目录，beetl默认前缀就是templates
beetl.templatesPath=templates
# 后缀
beetl.suffix=.html
# 是否开启beetl sql功能(比hibernate和mybatis功能更加强大)
beetlsql.enabled=false
# 是否开启beetl 模板引擎，默认为true，false表示禁用beetl
#beetl.enabled=false
#classpath 根路径
#RESOURCE.ROOT= templates
#是否检测文件变化,开发用true合适，但线上要改为false。 1.1.70.RELEASE 没有这个属性
#RESOURCE.autoCheck= true

######################### Beetl配置 end ###############################################

##################### MVC 配置 ###############################################

##################### MVC 配置 ###############################################










