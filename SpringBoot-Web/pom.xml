<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.gordon</groupId>
    <artifactId>springboot-web</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>springboot-web</name>
    <description>Demo project for Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.0.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!--<maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>-->
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <!--web项目核心依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--beetl模板引擎-->
        <!--<dependency>
            <groupId>com.ibeetl</groupId>
            <artifactId>beetl</artifactId>
            <version>2.9.3</version>
        </dependency>-->
        <!--beetl-framework-starter包含了beetl所有功能-->


        <dependency>
            <groupId>com.ibeetl</groupId>
            <artifactId>beetl-framework-starter</artifactId>
            <version>1.2.0.RELEASE</version>
        </dependency>


        <!-- 解决 Warning:java: 来自注释处理程序
            'org.antlr.v4.runtime.misc.NullUsageProcessor'
            的受支持 source 版本 'RELEASE_6' 低于 -source '1.8' begin-->
        <!--<dependency>
            <groupId>com.tunnelvisionlabs</groupId>
            <artifactId>antlr4-annotations</artifactId>
            <version>4.7.2</version>
        </dependency>

        <dependency>
            <groupId>com.tunnelvisionlabs</groupId>
            <artifactId>antlr4-runtime</artifactId>
            <version>4.7.2</version>
        </dependency>
        <dependency>
            <groupId>com.tunnelvisionlabs</groupId>
            <artifactId>antlr4</artifactId>
            <version>4.7.2</version>
        </dependency>-->
        <!-- 'RELEASE_6' 低于 -source '1.8' end -->

        <!--后台java bean检验，其实用的是Hibernate Validator
            其中依赖了spring-boot-starter、hibernate-validator等
            用法：https://www.bysocket.com/?p=1942
                 https://www.cnblogs.com/cjsblog/p/8946768.html-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.13</version>
        </dependency>
        <!-- druid连接池：
            https://www.cnblogs.com/wuyun-blog/p/5679073.html
            各种用法及问题：http://www.cnblogs.com/niejunlei/p/5977895.html-->
        <!--<dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.10</version>
        </dependency>-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.10</version>
        </dependency>
        <!--mybatis依赖 mybatis版本3.4.6-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.2</version>
        </dependency>
        <!--mybatis 分页插件-->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.10</version>
        </dependency>

        <!--@Data @Getter @Setter注解-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <!--项目A的POM文件有如下依赖声明，optional表示该依赖只影响项目A, 如果有项目B依赖了A，则这两个依赖不会被传递-->
            <optional>true</optional>
        </dependency>


        <!-- 解决 generatorConfig.xml中mybatis-generator-config_1_0.dtd找不到-->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>1.3.5</version>
        </dependency>

        <!--shiro-->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>1.4.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-ehcache</artifactId>
            <version>1.4.0</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.3.2</version>
        </dependency>

        <!--<dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version>
        </dependency>-->

        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.10</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.83</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--springboot热部署：http://tengj.top/2017/06/01/springboot10/-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <!--2.0以下将依赖关系标记为可选<optional>true</optional>是一种最佳做法，
                可以防止使用项目将devtools传递性地应用于其他模块。-->
            <optional>true</optional>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--
                Spring Boot的Maven插件（Spring Boot Maven plugin）
                    能够以Maven的方式为应用提供Spring Boot的支持，
                    即为Spring Boot应用提供了执行Maven操作的可能。
                Spring Boot Maven plugin能够将Spring Boot应用打包为可执行的jar或war文件，
                    然后以通常的方式运行Spring Boot应用。

                Spring Boot Maven plugin的5个Goals
                    spring-boot:repackage，默认goal。在mvn package之后，
                        再次打包可执行的jar/war，同时保留mvn package生成的jar/war为.origin
                    spring-boot:run，运行Spring Boot应用
                    spring-boot:start，在mvn integration-test阶段，进行Spring Boot应用生命周期的管理
                    spring-boot:stop，在mvn integration-test阶段，进行Spring Boot应用生命周期的管理
                    spring-boot:build-info，生成Actuator使用的构建信息文件build-info.properties
            -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!--2.0以下配合devtools热部署:<fork>true</fork>-->
                    <fork>true</fork>
                </configuration>
            </plugin>

            <!-- 自动生成mapper.xml、java bean、mapper接口-->
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.5</version>
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>8.0.13</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <!--允许移动生成的文件 -->
                    <verbose>true</verbose>
                    <!-- 是否覆盖 -->
                    <overwrite>true</overwrite>
                    <!-- 自动生成的配置 这里会报错 configurationfile不允许定义在这里-->
                    <!--<configurationfile>src/main/resources/mybatisGeneratorConfig.xml</configurationfile>-->
                </configuration>
                <executions>
                    <execution>
                        <id>Generate MyBatis Artifacts</id>
                        <!--每次install或者package时候，mybatis-generator都会随编译自动运行，
                            导致工程中的的mapper和dao都被冲掉-->
                        <!-- 该配置可避免maven install或者package时候运行该插件，导致本地mapper重新生成 -->
                        <phase>deploy</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <!-- 指定生成的war包到相对路径下-->
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.7.0</version>
                <executions>
                    <execution>
                        <id>copy-artifact</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <type>${project.packaging}</type>
                                </artifactItem>
                            </artifactItems>
                            &lt;!&ndash;   <outputDirectory>${dist.console.war.dir}</outputDirectory>   &ndash;&gt;
                            &lt;!&ndash;指定war包保存地址&ndash;&gt;
                            &lt;!&ndash;<outputDirectory>D:\Javaee\mypackage</outputDirectory>
                            <includes>
                                <include>*.war</include>
                            </includes>&ndash;&gt;
                            <outputDirectory>../target/</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>-->

            <plugin>
                <groupId>org.antlr</groupId>
                <artifactId>antlr4-maven-plugin</artifactId>
                <version>4.7.2</version>
            </plugin>

        </plugins>
    </build>


</project>
